/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_riakclient_2eproto__INCLUDED
#define PROTOBUF_C_riakclient_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _RpbErrorResp RpbErrorResp;
typedef struct _RpbGetClientIdResp RpbGetClientIdResp;
typedef struct _RpbSetClientIdReq RpbSetClientIdReq;
typedef struct _RpbGetServerInfoResp RpbGetServerInfoResp;
typedef struct _RpbGetReq RpbGetReq;
typedef struct _RpbGetResp RpbGetResp;
typedef struct _RpbPutReq RpbPutReq;
typedef struct _RpbPutResp RpbPutResp;
typedef struct _RpbDelReq RpbDelReq;
typedef struct _RpbListBucketsResp RpbListBucketsResp;
typedef struct _RpbListKeysReq RpbListKeysReq;
typedef struct _RpbListKeysResp RpbListKeysResp;
typedef struct _RpbGetBucketReq RpbGetBucketReq;
typedef struct _RpbGetBucketResp RpbGetBucketResp;
typedef struct _RpbSetBucketReq RpbSetBucketReq;
typedef struct _RpbMapRedReq RpbMapRedReq;
typedef struct _RpbMapRedResp RpbMapRedResp;
typedef struct _RpbContent RpbContent;
typedef struct _RpbPair RpbPair;
typedef struct _RpbLink RpbLink;
typedef struct _RpbBucketProps RpbBucketProps;


/* --- enums --- */


/* --- messages --- */

struct  _RpbErrorResp
{
  ProtobufCMessage base;
  ProtobufCBinaryData errmsg;
  uint32_t errcode;
};
#define RPB_ERROR_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_error_resp__descriptor) \
    , {0,NULL}, 0 }


struct  _RpbGetClientIdResp
{
  ProtobufCMessage base;
  ProtobufCBinaryData client_id;
};
#define RPB_GET_CLIENT_ID_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_get_client_id_resp__descriptor) \
    , {0,NULL} }


struct  _RpbSetClientIdReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData client_id;
};
#define RPB_SET_CLIENT_ID_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_set_client_id_req__descriptor) \
    , {0,NULL} }


struct  _RpbGetServerInfoResp
{
  ProtobufCMessage base;
  protobuf_c_boolean has_node;
  ProtobufCBinaryData node;
  protobuf_c_boolean has_server_version;
  ProtobufCBinaryData server_version;
};
#define RPB_GET_SERVER_INFO_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_get_server_info_resp__descriptor) \
    , 0,{0,NULL}, 0,{0,NULL} }


struct  _RpbGetReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData bucket;
  ProtobufCBinaryData key;
  protobuf_c_boolean has_r;
  uint32_t r;
};
#define RPB_GET_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_get_req__descriptor) \
    , {0,NULL}, {0,NULL}, 0,0 }


struct  _RpbGetResp
{
  ProtobufCMessage base;
  size_t n_content;
  RpbContent **content;
  protobuf_c_boolean has_vclock;
  ProtobufCBinaryData vclock;
};
#define RPB_GET_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_get_resp__descriptor) \
    , 0,NULL, 0,{0,NULL} }


struct  _RpbPutReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData bucket;
  ProtobufCBinaryData key;
  protobuf_c_boolean has_vclock;
  ProtobufCBinaryData vclock;
  RpbContent *content;
  protobuf_c_boolean has_w;
  uint32_t w;
  protobuf_c_boolean has_dw;
  uint32_t dw;
  protobuf_c_boolean has_return_body;
  protobuf_c_boolean return_body;
};
#define RPB_PUT_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_put_req__descriptor) \
    , {0,NULL}, {0,NULL}, 0,{0,NULL}, NULL, 0,0, 0,0, 0,0 }


struct  _RpbPutResp
{
  ProtobufCMessage base;
  size_t n_content;
  RpbContent **content;
  protobuf_c_boolean has_vclock;
  ProtobufCBinaryData vclock;
};
#define RPB_PUT_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_put_resp__descriptor) \
    , 0,NULL, 0,{0,NULL} }


struct  _RpbDelReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData bucket;
  ProtobufCBinaryData key;
  protobuf_c_boolean has_rw;
  uint32_t rw;
};
#define RPB_DEL_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_del_req__descriptor) \
    , {0,NULL}, {0,NULL}, 0,0 }


struct  _RpbListBucketsResp
{
  ProtobufCMessage base;
  size_t n_buckets;
  ProtobufCBinaryData *buckets;
};
#define RPB_LIST_BUCKETS_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_list_buckets_resp__descriptor) \
    , 0,NULL }


struct  _RpbListKeysReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData bucket;
};
#define RPB_LIST_KEYS_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_list_keys_req__descriptor) \
    , {0,NULL} }


struct  _RpbListKeysResp
{
  ProtobufCMessage base;
  size_t n_keys;
  ProtobufCBinaryData *keys;
  protobuf_c_boolean has_done;
  protobuf_c_boolean done;
};
#define RPB_LIST_KEYS_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_list_keys_resp__descriptor) \
    , 0,NULL, 0,0 }


struct  _RpbGetBucketReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData bucket;
};
#define RPB_GET_BUCKET_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_get_bucket_req__descriptor) \
    , {0,NULL} }


struct  _RpbGetBucketResp
{
  ProtobufCMessage base;
  RpbBucketProps *props;
};
#define RPB_GET_BUCKET_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_get_bucket_resp__descriptor) \
    , NULL }


struct  _RpbSetBucketReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData bucket;
  RpbBucketProps *props;
};
#define RPB_SET_BUCKET_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_set_bucket_req__descriptor) \
    , {0,NULL}, NULL }


struct  _RpbMapRedReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData request;
  ProtobufCBinaryData content_type;
};
#define RPB_MAP_RED_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_map_red_req__descriptor) \
    , {0,NULL}, {0,NULL} }


struct  _RpbMapRedResp
{
  ProtobufCMessage base;
  protobuf_c_boolean has_phase;
  uint32_t phase;
  protobuf_c_boolean has_response;
  ProtobufCBinaryData response;
  protobuf_c_boolean has_done;
  protobuf_c_boolean done;
};
#define RPB_MAP_RED_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_map_red_resp__descriptor) \
    , 0,0, 0,{0,NULL}, 0,0 }


struct  _RpbContent
{
  ProtobufCMessage base;
  ProtobufCBinaryData value;
  protobuf_c_boolean has_content_type;
  ProtobufCBinaryData content_type;
  protobuf_c_boolean has_charset;
  ProtobufCBinaryData charset;
  protobuf_c_boolean has_content_encoding;
  ProtobufCBinaryData content_encoding;
  protobuf_c_boolean has_vtag;
  ProtobufCBinaryData vtag;
  size_t n_links;
  RpbLink **links;
  protobuf_c_boolean has_last_mod;
  uint32_t last_mod;
  protobuf_c_boolean has_last_mod_usecs;
  uint32_t last_mod_usecs;
  size_t n_usermeta;
  RpbPair **usermeta;
};
#define RPB_CONTENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_content__descriptor) \
    , {0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,NULL, 0,0, 0,0, 0,NULL }


struct  _RpbPair
{
  ProtobufCMessage base;
  ProtobufCBinaryData key;
  protobuf_c_boolean has_value;
  ProtobufCBinaryData value;
};
#define RPB_PAIR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_pair__descriptor) \
    , {0,NULL}, 0,{0,NULL} }


struct  _RpbLink
{
  ProtobufCMessage base;
  protobuf_c_boolean has_bucket;
  ProtobufCBinaryData bucket;
  protobuf_c_boolean has_key;
  ProtobufCBinaryData key;
  protobuf_c_boolean has_tag;
  ProtobufCBinaryData tag;
};
#define RPB_LINK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_link__descriptor) \
    , 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL} }


struct  _RpbBucketProps
{
  ProtobufCMessage base;
  protobuf_c_boolean has_n_val;
  uint32_t n_val;
  protobuf_c_boolean has_allow_mult;
  protobuf_c_boolean allow_mult;
};
#define RPB_BUCKET_PROPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_bucket_props__descriptor) \
    , 0,0, 0,0 }


/* RpbErrorResp methods */
void   rpb_error_resp__init
                     (RpbErrorResp         *message);
size_t rpb_error_resp__get_packed_size
                     (const RpbErrorResp   *message);
size_t rpb_error_resp__pack
                     (const RpbErrorResp   *message,
                      uint8_t             *out);
size_t rpb_error_resp__pack_to_buffer
                     (const RpbErrorResp   *message,
                      ProtobufCBuffer     *buffer);
RpbErrorResp *
       rpb_error_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_error_resp__free_unpacked
                     (RpbErrorResp *message,
                      ProtobufCAllocator *allocator);
/* RpbGetClientIdResp methods */
void   rpb_get_client_id_resp__init
                     (RpbGetClientIdResp         *message);
size_t rpb_get_client_id_resp__get_packed_size
                     (const RpbGetClientIdResp   *message);
size_t rpb_get_client_id_resp__pack
                     (const RpbGetClientIdResp   *message,
                      uint8_t             *out);
size_t rpb_get_client_id_resp__pack_to_buffer
                     (const RpbGetClientIdResp   *message,
                      ProtobufCBuffer     *buffer);
RpbGetClientIdResp *
       rpb_get_client_id_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_get_client_id_resp__free_unpacked
                     (RpbGetClientIdResp *message,
                      ProtobufCAllocator *allocator);
/* RpbSetClientIdReq methods */
void   rpb_set_client_id_req__init
                     (RpbSetClientIdReq         *message);
size_t rpb_set_client_id_req__get_packed_size
                     (const RpbSetClientIdReq   *message);
size_t rpb_set_client_id_req__pack
                     (const RpbSetClientIdReq   *message,
                      uint8_t             *out);
size_t rpb_set_client_id_req__pack_to_buffer
                     (const RpbSetClientIdReq   *message,
                      ProtobufCBuffer     *buffer);
RpbSetClientIdReq *
       rpb_set_client_id_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_set_client_id_req__free_unpacked
                     (RpbSetClientIdReq *message,
                      ProtobufCAllocator *allocator);
/* RpbGetServerInfoResp methods */
void   rpb_get_server_info_resp__init
                     (RpbGetServerInfoResp         *message);
size_t rpb_get_server_info_resp__get_packed_size
                     (const RpbGetServerInfoResp   *message);
size_t rpb_get_server_info_resp__pack
                     (const RpbGetServerInfoResp   *message,
                      uint8_t             *out);
size_t rpb_get_server_info_resp__pack_to_buffer
                     (const RpbGetServerInfoResp   *message,
                      ProtobufCBuffer     *buffer);
RpbGetServerInfoResp *
       rpb_get_server_info_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_get_server_info_resp__free_unpacked
                     (RpbGetServerInfoResp *message,
                      ProtobufCAllocator *allocator);
/* RpbGetReq methods */
void   rpb_get_req__init
                     (RpbGetReq         *message);
size_t rpb_get_req__get_packed_size
                     (const RpbGetReq   *message);
size_t rpb_get_req__pack
                     (const RpbGetReq   *message,
                      uint8_t             *out);
size_t rpb_get_req__pack_to_buffer
                     (const RpbGetReq   *message,
                      ProtobufCBuffer     *buffer);
RpbGetReq *
       rpb_get_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_get_req__free_unpacked
                     (RpbGetReq *message,
                      ProtobufCAllocator *allocator);
/* RpbGetResp methods */
void   rpb_get_resp__init
                     (RpbGetResp         *message);
size_t rpb_get_resp__get_packed_size
                     (const RpbGetResp   *message);
size_t rpb_get_resp__pack
                     (const RpbGetResp   *message,
                      uint8_t             *out);
size_t rpb_get_resp__pack_to_buffer
                     (const RpbGetResp   *message,
                      ProtobufCBuffer     *buffer);
RpbGetResp *
       rpb_get_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_get_resp__free_unpacked
                     (RpbGetResp *message,
                      ProtobufCAllocator *allocator);
/* RpbPutReq methods */
void   rpb_put_req__init
                     (RpbPutReq         *message);
size_t rpb_put_req__get_packed_size
                     (const RpbPutReq   *message);
size_t rpb_put_req__pack
                     (const RpbPutReq   *message,
                      uint8_t             *out);
size_t rpb_put_req__pack_to_buffer
                     (const RpbPutReq   *message,
                      ProtobufCBuffer     *buffer);
RpbPutReq *
       rpb_put_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_put_req__free_unpacked
                     (RpbPutReq *message,
                      ProtobufCAllocator *allocator);
/* RpbPutResp methods */
void   rpb_put_resp__init
                     (RpbPutResp         *message);
size_t rpb_put_resp__get_packed_size
                     (const RpbPutResp   *message);
size_t rpb_put_resp__pack
                     (const RpbPutResp   *message,
                      uint8_t             *out);
size_t rpb_put_resp__pack_to_buffer
                     (const RpbPutResp   *message,
                      ProtobufCBuffer     *buffer);
RpbPutResp *
       rpb_put_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_put_resp__free_unpacked
                     (RpbPutResp *message,
                      ProtobufCAllocator *allocator);
/* RpbDelReq methods */
void   rpb_del_req__init
                     (RpbDelReq         *message);
size_t rpb_del_req__get_packed_size
                     (const RpbDelReq   *message);
size_t rpb_del_req__pack
                     (const RpbDelReq   *message,
                      uint8_t             *out);
size_t rpb_del_req__pack_to_buffer
                     (const RpbDelReq   *message,
                      ProtobufCBuffer     *buffer);
RpbDelReq *
       rpb_del_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_del_req__free_unpacked
                     (RpbDelReq *message,
                      ProtobufCAllocator *allocator);
/* RpbListBucketsResp methods */
void   rpb_list_buckets_resp__init
                     (RpbListBucketsResp         *message);
size_t rpb_list_buckets_resp__get_packed_size
                     (const RpbListBucketsResp   *message);
size_t rpb_list_buckets_resp__pack
                     (const RpbListBucketsResp   *message,
                      uint8_t             *out);
size_t rpb_list_buckets_resp__pack_to_buffer
                     (const RpbListBucketsResp   *message,
                      ProtobufCBuffer     *buffer);
RpbListBucketsResp *
       rpb_list_buckets_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_list_buckets_resp__free_unpacked
                     (RpbListBucketsResp *message,
                      ProtobufCAllocator *allocator);
/* RpbListKeysReq methods */
void   rpb_list_keys_req__init
                     (RpbListKeysReq         *message);
size_t rpb_list_keys_req__get_packed_size
                     (const RpbListKeysReq   *message);
size_t rpb_list_keys_req__pack
                     (const RpbListKeysReq   *message,
                      uint8_t             *out);
size_t rpb_list_keys_req__pack_to_buffer
                     (const RpbListKeysReq   *message,
                      ProtobufCBuffer     *buffer);
RpbListKeysReq *
       rpb_list_keys_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_list_keys_req__free_unpacked
                     (RpbListKeysReq *message,
                      ProtobufCAllocator *allocator);
/* RpbListKeysResp methods */
void   rpb_list_keys_resp__init
                     (RpbListKeysResp         *message);
size_t rpb_list_keys_resp__get_packed_size
                     (const RpbListKeysResp   *message);
size_t rpb_list_keys_resp__pack
                     (const RpbListKeysResp   *message,
                      uint8_t             *out);
size_t rpb_list_keys_resp__pack_to_buffer
                     (const RpbListKeysResp   *message,
                      ProtobufCBuffer     *buffer);
RpbListKeysResp *
       rpb_list_keys_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_list_keys_resp__free_unpacked
                     (RpbListKeysResp *message,
                      ProtobufCAllocator *allocator);
/* RpbGetBucketReq methods */
void   rpb_get_bucket_req__init
                     (RpbGetBucketReq         *message);
size_t rpb_get_bucket_req__get_packed_size
                     (const RpbGetBucketReq   *message);
size_t rpb_get_bucket_req__pack
                     (const RpbGetBucketReq   *message,
                      uint8_t             *out);
size_t rpb_get_bucket_req__pack_to_buffer
                     (const RpbGetBucketReq   *message,
                      ProtobufCBuffer     *buffer);
RpbGetBucketReq *
       rpb_get_bucket_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_get_bucket_req__free_unpacked
                     (RpbGetBucketReq *message,
                      ProtobufCAllocator *allocator);
/* RpbGetBucketResp methods */
void   rpb_get_bucket_resp__init
                     (RpbGetBucketResp         *message);
size_t rpb_get_bucket_resp__get_packed_size
                     (const RpbGetBucketResp   *message);
size_t rpb_get_bucket_resp__pack
                     (const RpbGetBucketResp   *message,
                      uint8_t             *out);
size_t rpb_get_bucket_resp__pack_to_buffer
                     (const RpbGetBucketResp   *message,
                      ProtobufCBuffer     *buffer);
RpbGetBucketResp *
       rpb_get_bucket_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_get_bucket_resp__free_unpacked
                     (RpbGetBucketResp *message,
                      ProtobufCAllocator *allocator);
/* RpbSetBucketReq methods */
void   rpb_set_bucket_req__init
                     (RpbSetBucketReq         *message);
size_t rpb_set_bucket_req__get_packed_size
                     (const RpbSetBucketReq   *message);
size_t rpb_set_bucket_req__pack
                     (const RpbSetBucketReq   *message,
                      uint8_t             *out);
size_t rpb_set_bucket_req__pack_to_buffer
                     (const RpbSetBucketReq   *message,
                      ProtobufCBuffer     *buffer);
RpbSetBucketReq *
       rpb_set_bucket_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_set_bucket_req__free_unpacked
                     (RpbSetBucketReq *message,
                      ProtobufCAllocator *allocator);
/* RpbMapRedReq methods */
void   rpb_map_red_req__init
                     (RpbMapRedReq         *message);
size_t rpb_map_red_req__get_packed_size
                     (const RpbMapRedReq   *message);
size_t rpb_map_red_req__pack
                     (const RpbMapRedReq   *message,
                      uint8_t             *out);
size_t rpb_map_red_req__pack_to_buffer
                     (const RpbMapRedReq   *message,
                      ProtobufCBuffer     *buffer);
RpbMapRedReq *
       rpb_map_red_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_map_red_req__free_unpacked
                     (RpbMapRedReq *message,
                      ProtobufCAllocator *allocator);
/* RpbMapRedResp methods */
void   rpb_map_red_resp__init
                     (RpbMapRedResp         *message);
size_t rpb_map_red_resp__get_packed_size
                     (const RpbMapRedResp   *message);
size_t rpb_map_red_resp__pack
                     (const RpbMapRedResp   *message,
                      uint8_t             *out);
size_t rpb_map_red_resp__pack_to_buffer
                     (const RpbMapRedResp   *message,
                      ProtobufCBuffer     *buffer);
RpbMapRedResp *
       rpb_map_red_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_map_red_resp__free_unpacked
                     (RpbMapRedResp *message,
                      ProtobufCAllocator *allocator);
/* RpbContent methods */
void   rpb_content__init
                     (RpbContent         *message);
size_t rpb_content__get_packed_size
                     (const RpbContent   *message);
size_t rpb_content__pack
                     (const RpbContent   *message,
                      uint8_t             *out);
size_t rpb_content__pack_to_buffer
                     (const RpbContent   *message,
                      ProtobufCBuffer     *buffer);
RpbContent *
       rpb_content__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_content__free_unpacked
                     (RpbContent *message,
                      ProtobufCAllocator *allocator);
/* RpbPair methods */
void   rpb_pair__init
                     (RpbPair         *message);
size_t rpb_pair__get_packed_size
                     (const RpbPair   *message);
size_t rpb_pair__pack
                     (const RpbPair   *message,
                      uint8_t             *out);
size_t rpb_pair__pack_to_buffer
                     (const RpbPair   *message,
                      ProtobufCBuffer     *buffer);
RpbPair *
       rpb_pair__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_pair__free_unpacked
                     (RpbPair *message,
                      ProtobufCAllocator *allocator);
/* RpbLink methods */
void   rpb_link__init
                     (RpbLink         *message);
size_t rpb_link__get_packed_size
                     (const RpbLink   *message);
size_t rpb_link__pack
                     (const RpbLink   *message,
                      uint8_t             *out);
size_t rpb_link__pack_to_buffer
                     (const RpbLink   *message,
                      ProtobufCBuffer     *buffer);
RpbLink *
       rpb_link__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_link__free_unpacked
                     (RpbLink *message,
                      ProtobufCAllocator *allocator);
/* RpbBucketProps methods */
void   rpb_bucket_props__init
                     (RpbBucketProps         *message);
size_t rpb_bucket_props__get_packed_size
                     (const RpbBucketProps   *message);
size_t rpb_bucket_props__pack
                     (const RpbBucketProps   *message,
                      uint8_t             *out);
size_t rpb_bucket_props__pack_to_buffer
                     (const RpbBucketProps   *message,
                      ProtobufCBuffer     *buffer);
RpbBucketProps *
       rpb_bucket_props__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_bucket_props__free_unpacked
                     (RpbBucketProps *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*RpbErrorResp_Closure)
                 (const RpbErrorResp *message,
                  void *closure_data);
typedef void (*RpbGetClientIdResp_Closure)
                 (const RpbGetClientIdResp *message,
                  void *closure_data);
typedef void (*RpbSetClientIdReq_Closure)
                 (const RpbSetClientIdReq *message,
                  void *closure_data);
typedef void (*RpbGetServerInfoResp_Closure)
                 (const RpbGetServerInfoResp *message,
                  void *closure_data);
typedef void (*RpbGetReq_Closure)
                 (const RpbGetReq *message,
                  void *closure_data);
typedef void (*RpbGetResp_Closure)
                 (const RpbGetResp *message,
                  void *closure_data);
typedef void (*RpbPutReq_Closure)
                 (const RpbPutReq *message,
                  void *closure_data);
typedef void (*RpbPutResp_Closure)
                 (const RpbPutResp *message,
                  void *closure_data);
typedef void (*RpbDelReq_Closure)
                 (const RpbDelReq *message,
                  void *closure_data);
typedef void (*RpbListBucketsResp_Closure)
                 (const RpbListBucketsResp *message,
                  void *closure_data);
typedef void (*RpbListKeysReq_Closure)
                 (const RpbListKeysReq *message,
                  void *closure_data);
typedef void (*RpbListKeysResp_Closure)
                 (const RpbListKeysResp *message,
                  void *closure_data);
typedef void (*RpbGetBucketReq_Closure)
                 (const RpbGetBucketReq *message,
                  void *closure_data);
typedef void (*RpbGetBucketResp_Closure)
                 (const RpbGetBucketResp *message,
                  void *closure_data);
typedef void (*RpbSetBucketReq_Closure)
                 (const RpbSetBucketReq *message,
                  void *closure_data);
typedef void (*RpbMapRedReq_Closure)
                 (const RpbMapRedReq *message,
                  void *closure_data);
typedef void (*RpbMapRedResp_Closure)
                 (const RpbMapRedResp *message,
                  void *closure_data);
typedef void (*RpbContent_Closure)
                 (const RpbContent *message,
                  void *closure_data);
typedef void (*RpbPair_Closure)
                 (const RpbPair *message,
                  void *closure_data);
typedef void (*RpbLink_Closure)
                 (const RpbLink *message,
                  void *closure_data);
typedef void (*RpbBucketProps_Closure)
                 (const RpbBucketProps *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor rpb_error_resp__descriptor;
extern const ProtobufCMessageDescriptor rpb_get_client_id_resp__descriptor;
extern const ProtobufCMessageDescriptor rpb_set_client_id_req__descriptor;
extern const ProtobufCMessageDescriptor rpb_get_server_info_resp__descriptor;
extern const ProtobufCMessageDescriptor rpb_get_req__descriptor;
extern const ProtobufCMessageDescriptor rpb_get_resp__descriptor;
extern const ProtobufCMessageDescriptor rpb_put_req__descriptor;
extern const ProtobufCMessageDescriptor rpb_put_resp__descriptor;
extern const ProtobufCMessageDescriptor rpb_del_req__descriptor;
extern const ProtobufCMessageDescriptor rpb_list_buckets_resp__descriptor;
extern const ProtobufCMessageDescriptor rpb_list_keys_req__descriptor;
extern const ProtobufCMessageDescriptor rpb_list_keys_resp__descriptor;
extern const ProtobufCMessageDescriptor rpb_get_bucket_req__descriptor;
extern const ProtobufCMessageDescriptor rpb_get_bucket_resp__descriptor;
extern const ProtobufCMessageDescriptor rpb_set_bucket_req__descriptor;
extern const ProtobufCMessageDescriptor rpb_map_red_req__descriptor;
extern const ProtobufCMessageDescriptor rpb_map_red_resp__descriptor;
extern const ProtobufCMessageDescriptor rpb_content__descriptor;
extern const ProtobufCMessageDescriptor rpb_pair__descriptor;
extern const ProtobufCMessageDescriptor rpb_link__descriptor;
extern const ProtobufCMessageDescriptor rpb_bucket_props__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_riakclient_2eproto__INCLUDED */
